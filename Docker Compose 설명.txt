[ 52강 ]


\\wsl$\Ubuntu\home\yujong


< Docker Compose >

- 여러 개의 도커 컨테이너들을 하나의 파일('docker-compose.yml')에 정의하여 함께 작동시키는 것
  여러 개의 도커 컨테이너들을 관리하고 서로 통신하며 동작하는 멀티 컨테이너 애플리케이션을 정의하고 실행하기 위한 도구.
  yaml파일을 통해 애플리케이션의 구성과 설정을 관리할 수 있음.
  여러 컨테이너들을 한 번에 시작, 정지 또는 중지하기 쉽게 해줌.
  코드로 인프라 및 서비스 구성 관리를 할 수 있음.
- wsl 입력창에 docker-compose 라고 입력

=========================================================================================================


# docker-compose up 

- 'docker-compose.yml 파일'을 사용하여 서비스(컨테이너)를 시작하고, 컨테이너를 실행함.
  'docker-compose up -d'와는 달리, 포어그라운드(foreground)에서 컨테이너를 실행하기 때문에, '로그를 실시간으로 출력'함.


# docker-compose up -d

- 'docker-compose.yml 파일'을 사용하여 서비스(컨테이너)를 시작하고, 컨테이너를 실행하며, 상세 로그 출력 없이 실행 결과만 출력됨.


# '컨테이너가 백그라운드에서 실행'된다는 것의 의미

- 해당 컨테이너가 동작 중일 때에 터미널에서 다른 작업을 수행할 수 있고, 컨테이너의 로그 출력을 실시간으로 확인할 필요가 없다는 의미.
- 포어그라운드(foreground)에서 컨테이너를 실행하면, 해당 컨테이너의 실행 상태와 로그를 실시간으로 얻을 수 있지만,
  터미널 창이나 콘솔이 해당 컨테이너와 직접 연결되어 이 컨테이너가 실행되는 동안 터미널을 이용한 다른 작업을 진행할 수 없음.
- 백그라운드(background)에서 컨테이너를 실행하면, 컨테이너의 로그를 터미널에 출력하지 않고 독립적으로 작동시키게 하는 것임.
  사용자는 터미널에서 다른 작업을 계속할 수 있으며, 터미널을 종료시키는 것도 가능함.
  -d 또는 --detach 옵션을 추가해서 실행함.


# docker-compose up --build

- Docker Compose 파일에 정의된 모든 서비스(컨테이너)를 강제로 다시 리빌드하는 명령어.
  기존에 빌드된 도커 이미지가 존재하더라도, 새로운 도커 이미지를 생성하고,
  그 이미지를 사용하여 컨테이너를 다시 시작함.
- 기존 프로젝트 코드에 코드 변경이 잇는 경우 또는 연관된 서비스나 인프라를 함께 실행해야 하는 애플리케이션을 테스트하고나 디버깅할 때 등에 사용함.


# docker-compose down

- Docker Compose를 사용하여 실행 중인 모든 서비스와 컨테이너를 정지시키고 제거함.


# docker-compose ps

- '현재 프로젝트의 Docker Compose 파일 내'의 '실행 중'인 '서비스들(컨테이너들)'의 정보를 출력해줌.
- 만약, 현재 프로젝트에 'docker-compose.yaml 파일' 자체가 존재하지 않다면, 
  설사 그 프로젝트 컨테이너가 현재 실행 중이더라 하더라도, 이 명령어는 아무것도 출력해주지 않음.