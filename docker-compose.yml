
# 터미널에서 '명령어 docker-compose up'을 실행시키면, Docker Compose가 'docker-compose.yml' 파일을 릭어와서 '서비스를 생성'함.
# Docker Compose를 사용하여, 여러 컨테이너로 구성된 애플리케이션의 개발, 테스트, 스테이징 환경을 쉽게 구성하고 실행시킴.

#=======================================================================================================================

# < index.js >
# - 웹 애플리케이션의 로직을 구현한 코드
# - docker-compose.yml 설정을 통해 '서비스 node-app'으로 정의되고 실행됨.


# < Dockerfile >
# - 웹 애플리케이션 로직(index.js 파일)을 실행시키기 위해 필요한 도커 이미지를 정의함.
#   즉, '서비스 node-app'에 적용될 베이스 이미지 빌드 방법을 정의한 것임.


# < docker-compose.yml >
# - 두 서비스(컨테이너)인 redis-server(Redis 클라인트와 Redis 서버 간 연결 담당), 
#   node-app(웹 애플리케이션 로직 index.js 파일 실행. Dockerfile을 토대로 빌드된 이미지 사용)을 관리하는 설정 제공.

#=======================================================================================================================

# Docker Compose 파일의 버전을 지정함.
version: '3' 
# 'services'는 '컨테이너'와 아주 유사한 개념이라 생각하면 됨.
# 아래에서는 2개의 서비스(redis-server와 node-app)를 정의하고 있음.
services:
  # < service 1 >
  redis-server:
    # '컨테이너 redis-server'가 빌드될 때 사용하도록 하는 도커 이미지를 설정.
    # 이 이미지는 Docker Hub에서 가져옴.
    image: 'redis'
  # < service 2 >
  # - docker-compose.yml 파일은 Dockerfile을 참조하여 node-app 서비스(컨테이너)를 빌드함.
  # - Dockerfile은 index.js 파일을 포함하는 도커 이미지를 빌드함.
  node-app:

    restart: on-failure

    # 컨테이너 빌드 시의 베이스 이미지를 입력하는 것보다, 
    # 현재 Dockerfile의 디렉토리를 찾고, 그 안에 있는 도커 이미지를 사용해서 바로 빌드시킴. 
    build: .  
    # '컨테이너'와 '호스트' 간의 '포트 매핑'을 설정함. 
    # 여기서는 '호스트의 포트 4001'을 '컨테이너의 포트 8081'로 매핑시킴. 
    ports:
      # 첫 번째 4001: 내 로컬 컴퓨터의 포트
      # 두 번째 8081: 컨테이너의 포트
      - "4001:8081"
