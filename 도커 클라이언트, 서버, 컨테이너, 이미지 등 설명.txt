< Docker client / Docker daemon / Docker server / Docker hub>


# Docker client

- 사용자(개발자)가 도커를 커맨드 라인이나 REST API를 통해 제어하기 위한 인터페이스.
- Docker daemon(=Docker server)과 통신하여 사용자의 명령을 전달하고, 그 결과를 반환받음.
- 사용자는 Docker client를 통해, 컨테이너 생성, 실행, 중지, 삭제 등 다양한 작업을 수행할 수 있ㅇ므.
- Docker client는 로컬 머신 뿐만 아니라, 원격 Dockeer 호스트와도 통신할 수 있음.
- 주요 역할
  1) 명령 전달
    : Docker 명령행 도구를 사용하여, 사용자(개발자)가 명령을 입력하면, Docker client는 해당 명령을 Docker daemon에 전달하고 그 결과를 반환함.
  2) Docker 이미지 관리
    : Docker 이미지를 검색, 다운로드, 업로드 및 관리하는 데 도움이 됨. 
  3) 컨테이너 관리
    : 컨테이너의 생성, 시작, 중지, 재시작, 삭제 등의 작업을 수행할 수 있도록 함.
  4) 볼륨 및 네크워크 관리
    : Docker 사용자에게 영구 볼륨 및 가상 네트워크 리소스를 관리하고 설정할 수 있는 기능을 제공함.


# Docker daemon

- 일반적으로 Docker server와 같은 의미로 사용되나, Docker server보다는 하위 개념임.
- 리눅스 또는 윈도우 서버에서 실행되며, 명령을 받아 실제로 작업을 수행하는 백그라운드 프로세스.
  서버 프로세스에서 실행되며, 컨테이너의 수명 주기와 관련된 모든 작업을 처리함.
- 사용자로부터 전달된 RESTful API를 통해 명령을 전달받음.
- 주요 역할
  1) Docker 이미지 생성
    : Docker Interpreter를 토해 Docker 이미지를 빌드함. Docker file에 지정된 명령을 순차적으로 실행하여 Docker 이미지를 만든다.
  2) Docker 이미지 저장
    : 생성된 이미지를 로컬 또는 원격 Docker 레지스트리에 저장함.
  3) 컨테이너 생성 및 관리
    : 필요한 Docker 이미지를 Docker Hub 또는 로컬 저장소에서 가져와서, 
     이를 실행하여 컨테이너를 생성, 구동하고, 컨테이너 간에 영향을 주지 않는 독립된 환경을 제공함.
  4) Docker API를 통해 클라이언트와 통신하며, Docker API를 통해 받은 클라이언트의 명령을 처리하고 실행함.
  5) 네트워크 관리
    : 컨테이너에 대한 가상 네트워크 인프라를 설정하고 관리함. 이를 통해 서로 달느 컨테이너 간 통신이 가능해짐.
  6) 자원 할당
    : 호스트 시스템의 자원(CPU, RAM, 디스크 공간 등)을 컨테이너에 할당함.
  7) Docker daemon은 컨테이너를 관리하고 실행하기 위해, 호스트 시스템의 운영 체제 커널과 상호작용함.
  


# Docker server

- Docker daemon과 같은 의미로 사용되나, Docker daemon 보다는 상위 개념임.
- 서버는 구성 요소 전체를 통합하여 전체 Docker 시스템을 구성함. 핵심 구성 요소를 포함하여 전반적인 프레임워크를 제공함.
- 주요 구성 요소
  1) Docker daemon
    : 도커 서버의 핵심 구성 요소로, 백그라운드에서 실행됨.
  2) Docker client
    : 사용자 인터페이스로 작동하여 사용자가 완벽한 도커 환경을 구성하고 관리할 수 있도록 도와줌.
  3) 호스트 시스템
    : Docker daemon이 실행되는 시스템 환경. 이를 통해 컨테이너가 호스트 OS의 하드웨어 리소스와 상호 작용할 수 있음.
  4) 컨테이너 런타임
    : 일반적으로 도커는 컨테이너 런타임도 포함함(e.g: 컨테이너를 실행하는 데 필요한 기본 요소).


# Docker hub

- 개발자들이 Docker 컨테이너 이미지를 저장, 공유, 관리하는 온라인 서비스(= 온라인 중앙 저장소).
- 사용자들은 이 서비스를 사용하여 Docker 이미지를 찾고, 공유하고, 저장할 수 있음.
 


=========================================================================================================


< 도커 이미지 >

- 애플리케이션과 프로젝트에 필요한 모든 파일과 설정 정보를 포함한 패키지. 파일 시스템의 스냅샷임.
  컨테이너 생성에 사용되며, 응용 프로그램, 라이브러리, 종속성 및 운영체제 설정 등을 포함함.
  컨테이너를 실행하기 위한 기본 설계도 같은 것임.
  즉, 집을 짓기 위한 설계도가 있어야 집을 지을 수 있는 것처럼, 컨테이너를 실행하기 위해서는 이미지가 필요한 것임.
  도커 이미지가 실행되면 컨테이너가 생성됨.
  그리고, 컨테이는 그 이미지를 기반으로 독립적으로 실행되는 프로세스임.
- 이미지가 컨테이너의 기반이 되며, 컨테이너는 이미지를 실행하여 애플리케이션을 구동하는 역할임.
- 사용법
  방법1) Docker hub 에서 이미지를 가져온다: docker pull {image:tage}
  방법2) 직접 이미지를 빌드한다: docker build -t {image:tag} {path}


=========================================================================================================


< 도커 컨테이너 >

- '도커 이미지를 실행한 상태'로, 독립적으로 실행되는 프로세스임.
  운영체제 수준의 가상화 기술을 사용하여 격리된 환경에서 실행됨.
- 가볍고 빠르고 확장 가능하며, 도커 이미지와 함께 응용 프로그램의 실행 환경을 캡슐화함. 
  도커 컨테이너는 호스트와 격리되어 있으며, 자원 및 환경설정 등을 공유하거나 격리할 수 있음.
- 여러 개의 컨테이너를 동시에 실행할 수 있으며, 각각의 개별 컨테이너들은 네트워크, 파일 시스템, 환경변수 등의 리소스를 독립적으로 가짐.


