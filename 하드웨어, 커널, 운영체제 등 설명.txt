< 하드웨어, 커널, 시스템 호출, 운영체제 의 순서도 >


응용 프로그램(애플리케이션)

  ㅣ  - 애플리케이션(응용 프로그램)은 시스템 콜을 사용하여 운영체제에게 특정 작업, 기능을 요청, 호출하고 필요한 결과(서비스)를 (반환)받을 수 있음.
  ㅣ     즉, 시스템 자원을 요청하거나 작업을 수행하기 위해 시스템 콜을 사용함.
  ㅣ  - 시스템 콜은 응용 프로그램과 운영체제 간의 인터페이스 역할을 수행하는 것임.
  ㅣ 
  ▽

시스템 콜 인터페이스

  ㅣ  - 시스템 콜은, 응용 프로그램이 운영체제를 통해 하드웨어 자원에 접근하거나기능을 요청할 수 있는 인터페이스를 제공함.
  ㅣ  - 시스템 콜은, 운영체제에게 필요한 작업을 요청하고 운영체제가 해당 작업을 수행할 수 있도록 함.
  ㅣ  - 운영체제는 시스템 콜을 받아들여, 해당 서비스를 수행하고, 그 결과를 응용 프로그램에 반환해줌.
  ㅣ    즉, 운영체제는 시스템 호출을 처리하고, 응용 프로그램이 요청한 서비스를 제공하는 역할을 수행함.
  ▽    

운영체제('커널'과 비슷)

  ㅣ  - 커널은 운영체제의 핵심 부분으로, 운영체제의 다른 구성 요소와 밀접하게 연계하여 컴퓨터 시스템을 관리함.
  ㅣ  - 커널은 운영체제의 핵심'부분'으로 하드웨어를 제어하고 운영체제 기능을 제공하는 소프트웨어인 반면,
  ㅣ    운영체제는 커널을 포함하여 여러 다른 요소들로 구성되며, 사용자 인터페이스, 시스템 유틸리티, 네트워킹 서비스 등을 포함하고 있음.
  ㅣ
  ▽

 커널 Kernel

  ㅣ  - 커널은 운영체제의 핵심 부분으로, 하드웨어를 직접 조작하며 시스템 자원 관리를 위해 필요한 작업을 수행함.
  ㅣ    커널은 하드웨어와 직접 통신하고, 하드웨어 자원과 응용 프로그램 간의 중재자 역할을 하며, 
  ㅣ    하드웨어 자원을 추상화하여 스프트웨어가 접근할 수 있도록 소프트웨어에게 할당/반환하는 중요한 역할을 함.
  ㅣ  - 하드웨어는 물리적 구성 요소(CPU, 메모리 등)이며, 커널은 소프트웨어 구성 요소로, 하드웨어와 소프트웨어 간의 통신 인터페이스임.
  ▽ 

하드웨어(CPU, 메모리 등)


=========================================================================================================


< 하드웨어 Hardware >

- 컴퓨터의 물리적(실제 손으로 만질 수 있는) 구성 요소.
  CPU, 메모리, 저장 장치, GPU 및 기타 주변 장치를 포함함.
- 운영체제 및 응용 프로그램의 실행과 데이터 처리를 지원함.


=========================================================================================================


< 커널 Kernel >

- 운영체제의 핵심 부분으로, 하드웨어와 소프트웨어 사이에서 통신하는 인터페이스를 제공함.
- 커널은 다른 시스템 부분과는 달리, 코드가 하드웨어와 매우 밀접하게 작동하므로 자원 효율성과 안정성이 중요함.
- 하드웨어 추상화, 프로세스 관리, 메모리 관리, 파일 시스템 관리, 입출력 장치 관리, 시스템 호출 처리 등의 역할을 함.

=========================================================================================================

< 운영체제 Operating System >

- 하드웨어 자원을 관리하고 사용자와 하드웨어 사이의 인터페이스 역할을 하는 시스템 소프트웨어.
  하드웨어 위에서 실행되며, 사용자 및 응용 애플리케이션(프로그램)이 하드웨어와 상호작용할 수 있는 통합 인터페이스를 제공함.
- 사용자 인터페이스 제공(GUI, CLI, API), 프로세스 관리, 메모리 관리, 파일 시스템 관리, 장치 드라이버 관리 등의 기능을 함.


=========================================================================================================

< 시스템 호출 System Call >

- 운영체제와 응용 프로그램 간의 통신 방식.
  응용 프로그램(애플리케이션)은 시스템 콜을 사용하여 운영체제에게 하드웨어 자원 및 서비스의 사용을 요청하고,
  운영체제는 해당 요청을 커널에 전달하여 처리하게 됨.
  즉, 애플리케이션과 커널 간의 통신을 위한 메커니즘을 제공하는 것임.
  커널에서 제공하는 서비스를 애플리케이션에서 요청하고 사용하는 프로그래머 인터페이스.



=========================================================================================================

< 쉘 Shell >

- '사용자' <---> '운영체제' 사이에서 상호 작용하는 인터페이스로, 사용자의 명령을 '운영체제 OS'에 전달하고, 그 결과를 반환하는 역할을 함.
  사용자는 명령어를 입력하여 프로그램 실행, 프로세스 제어, 파일 및 디렉토리 관리, 사용자 인증 등을 할 수 있음.
  즉, 사용자로부터 명령어를 전달받아 그것을 운영체제에 전달해줌.
  쉘이 있기에 사용자는 명령행 기반의 인터페이스를 통해 운영체제를 제어할 수 있는 것임.
- 사용자는 터미널을 통해 명령어를 입력하고 실행함.
- 다양한 종류의 쉘이 있으며, 각각의 쉘은 고유한 스크립트를 사용함.
  e.g) Bash, C Shell, Bourne Shell, Korn Shell, ...



< 터미널 Terminal >

- '사용자' <---> '컴퓨터'와 상호작용하기 위한 텍스트 기반 인터페이스임. 물리적 또는 가상의 입출력 장치임.
  '사용자'와 '쉘' 사이에서 사용자의 명령어와 운영체제의 결과를 전달해주는 역할을 함.
- 사용자의 명령어를 단순히 '입력받고', 운영체제로부터 그 명령어의 실행 결과를 '표시'해주는 역할 딱 그 이상도 이하도 아님.
- 원격 접속을 위한 터미널('SSH' 등)이 존재함.
- 사용자 <------- (터미널)(=대화창) ------- 쉘(=사용자가 입력한 명령어를 번역해주는 번역기) -------> 컴퓨터(운영체제)



< '쉘 Shell'과 '터미널 Terminal'의 차이점 >

# 차이점

- '쉘'은 사용자의 명령어를 해석하고 실행하고, '터미널'은 그 사용자의 명령어가 입력되는 '입출력 장치 딱 그 기능'의 역할.
- '쉘'은 다양한 구현체(Bash, XShell, C Shell 등)가 존재하지만, '터미널'은 물리적 또는 가상적 장치 딱 그 자체.
- '쉘'은 사용자가 운영체제 OS와 상호작용하여 파일 관리, 프로그램 관리 등의 작업이 필요한 경우에 사용하는 것이고,
  '터미널'은 사용자가 원격 접속을 해야 하는 경우, 텍스트 기반 인터페이스가 필요한 경우 등에 사용되는 것임.
- '터미널'은 '쉘 <---> 사용자' 사이의 '대화창'과 같은 역할.
  '쉘'은 이 대화창에서 실행되는 '사용자의 명령어를 번역해주는 번역기'의 역할임.

   

=========================================================================================================




